pipeline {
    agent any
    
    environment {
        // Variables de entorno
        DOCKER_IMAGE = 'proyecto-clima'
        DOCKER_TAG = "${BUILD_NUMBER}"
        NODE_VERSION = '18'
        FLUTTER_VERSION = 'stable'
    }
    
    options {
        // Mantener solo los √∫ltimos 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Timeout del pipeline completo
        timeout(time: 30, unit: 'MINUTES')
        // Mostrar timestamps en los logs
        timestamps()
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Descargando c√≥digo fuente...'
                checkout scm
                
                // Mostrar informaci√≥n del commit
                sh '''
                    echo "üìã Informaci√≥n del Build:"
                    echo "Commit: $(git rev-parse HEAD)"
                    echo "Autor: $(git log -1 --pretty=format:'%an')"
                    echo "Mensaje: $(git log -1 --pretty=format:'%s')"
                    echo "Rama: ${GIT_BRANCH}"
                '''
            }
        }
        
        stage('Environment Setup') {
            parallel {
                stage('Node.js Setup') {
                    steps {
                        echo 'üü¢ Configurando Node.js...'
                        dir('test_app') {
                            sh '''
                                echo "Node version: $(node --version)"
                                echo "NPM version: $(npm --version)"
                                echo "üì¶ Verificando package.json..."
                                cat package.json
                            '''
                        }
                    }
                }
                
                stage('Flutter Setup') {
                    steps {
                        echo 'üíô Verificando Flutter...'
                        dir('test_app') {
                            sh '''
                                if command -v flutter &> /dev/null; then
                                    echo "Flutter version: $(flutter --version)"
                                else
                                    echo "‚ö†Ô∏è  Flutter no est√° instalado en este agente"
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Dependencies') {
            parallel {
                stage('Node Dependencies') {
                    steps {
                        echo 'üì• Instalando dependencias de Node.js...'
                        dir('test_app') {
                            sh 'npm ci --only=production'
                        }
                    }
                }
                
                stage('Flutter Dependencies') {
                    when {
                        expression {
                            return fileExists('test_app/pubspec.yaml')
                        }
                    }
                    steps {
                        echo 'üì• Instalando dependencias de Flutter...'
                        dir('test_app') {
                            script {
                                if (sh(script: 'command -v flutter', returnStatus: true) == 0) {
                                    sh 'flutter pub get'
                                } else {
                                    echo '‚ö†Ô∏è  Saltando Flutter pub get - Flutter no disponible'
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('Lint Node.js') {
                    steps {
                        echo 'üîç An√°lisis de c√≥digo Node.js...'
                        dir('test_app') {
                            script {
                                try {
                                    sh 'npm run lint || echo "‚ö†Ô∏è  No hay script de lint configurado"'
                                } catch (Exception e) {
                                    echo "‚ö†Ô∏è  Error en lint: ${e.getMessage()}"
                                }
                            }
                        }
                    }
                }
                
                stage('Flutter Analyze') {
                    when {
                        expression {
                            return fileExists('test_app/pubspec.yaml')
                        }
                    }
                    steps {
                        echo 'üîç An√°lisis de c√≥digo Flutter...'
                        dir('test_app') {
                            script {
                                if (sh(script: 'command -v flutter', returnStatus: true) == 0) {
                                    sh 'flutter analyze'
                                } else {
                                    echo '‚ö†Ô∏è  Saltando Flutter analyze - Flutter no disponible'
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Tests') {
            parallel {
                stage('Node.js Tests') {
                    steps {
                        echo 'üß™ Ejecutando tests de Node.js...'
                        dir('test_app') {
                            script {
                                try {
                                    sh 'npm test'
                                } catch (Exception e) {
                                    echo "‚ùå Error en tests: ${e.getMessage()}"
                                    currentBuild.result = 'UNSTABLE'
                                }
                            }
                        }
                    }
                    post {
                        always {
                            // Publicar resultados de tests si existen
                            script {
                                if (fileExists('test_app/test-results.xml')) {
                                    publishTestResults([
                                        allowEmptyResults: false,
                                        testResultsPattern: 'test_app/test-results.xml'
                                    ])
                                }
                            }
                        }
                    }
                }
                
                stage('Flutter Tests') {
                    when {
                        expression {
                            return fileExists('test_app/test/')
                        }
                    }
                    steps {
                        echo 'üß™ Ejecutando tests de Flutter...'
                        dir('test_app') {
                            script {
                                if (sh(script: 'command -v flutter', returnStatus: true) == 0) {
                                    sh 'flutter test'
                                } else {
                                    echo '‚ö†Ô∏è  Saltando Flutter tests - Flutter no disponible'
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build') {
            parallel {
                stage('Build Node.js App') {
                    steps {
                        echo 'üî® Construyendo aplicaci√≥n Node.js...'
                        dir('test_app') {
                            script {
                                try {
                                    sh 'npm run build || echo "‚ö†Ô∏è  No hay script de build configurado"'
                                } catch (Exception e) {
                                    echo "‚ö†Ô∏è  Error en build: ${e.getMessage()}"
                                }
                            }
                        }
                    }
                }
                
                stage('Build Flutter Web') {
                    when {
                        expression {
                            return fileExists('test_app/web/')
                        }
                    }
                    steps {
                        echo 'üî® Construyendo Flutter para Web...'
                        dir('test_app') {
                            script {
                                if (sh(script: 'command -v flutter', returnStatus: true) == 0) {
                                    sh 'flutter build web'
                                } else {
                                    echo '‚ö†Ô∏è  Saltando Flutter build web - Flutter no disponible'
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Docker Build') {
            when {
                expression {
                    return fileExists('test_app/Dockerfile')
                }
            }
            steps {
                echo 'üê≥ Construyendo imagen Docker...'
                dir('test_app') {
                    script {
                        try {
                            def image = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                            echo "‚úÖ Imagen Docker construida: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                            
                            // Opcional: pushear a registry
                            // image.push()
                            // image.push('latest')
                            
                        } catch (Exception e) {
                            echo "‚ùå Error construyendo Docker: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
        
        stage('Security Scan') {
            parallel {
                stage('Node.js Security') {
                    steps {
                        echo 'üîí Escaneando dependencias de Node.js...'
                        dir('test_app') {
                            script {
                                try {
                                    sh 'npm audit --audit-level=high'
                                } catch (Exception e) {
                                    echo "‚ö†Ô∏è  Vulnerabilidades encontradas: ${e.getMessage()}"
                                    currentBuild.result = 'UNSTABLE'
                                }
                            }
                        }
                    }
                }
                
                stage('Docker Security') {
                    when {
                        expression {
                            return fileExists('test_app/Dockerfile')
                        }
                    }
                    steps {
                        echo 'üîí Escaneando imagen Docker...'
                        script {
                            try {
                                // Ejemplo con trivy (si est√° instalado)
                                sh '''
                                    if command -v trivy &> /dev/null; then
                                        trivy image ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                                    else
                                        echo "‚ö†Ô∏è  Trivy no est√° instalado"
                                    fi
                                '''
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è  Error en escaneo Docker: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'main'
            }
            steps {
                echo 'üöÄ Desplegando a Staging...'
                script {
                    try {
                        // Aqu√≠ ir√≠an los comandos de despliegue
                        sh '''
                            echo "üåê Simulando despliegue a staging..."
                            echo "Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                            echo "Ambiente: Staging"
                            echo "URL: https://staging.proyecto-clima.com"
                        '''
                    } catch (Exception e) {
                        echo "‚ùå Error en despliegue: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Limpiando workspace...'
            
            // Limpiar im√°genes Docker locales (opcional)
            script {
                try {
                    sh '''
                        echo "üßπ Limpiando im√°genes Docker..."
                        docker images -q ${DOCKER_IMAGE} | xargs -r docker rmi -f || true
                    '''
                } catch (Exception e) {
                    echo "‚ö†Ô∏è  Error limpiando Docker: ${e.getMessage()}"
                }
            }
            
            // Archivar artefactos importantes
            archiveArtifacts artifacts: 'test_app/package.json, test_app/Dockerfile', allowEmptyArchive: true
        }
        
        success {
            echo '‚úÖ ¬°Pipeline completado exitosamente!'
            
            // Opcional: Notificaciones
            script {
                try {
                    // Ejemplo de notificaci√≥n por email o Slack
                    emailext (
                        subject: "‚úÖ Build Exitoso - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                            ¬°El build se complet√≥ exitosamente!
                            
                            Proyecto: ${env.JOB_NAME}
                            Build: #${env.BUILD_NUMBER}
                            Commit: ${env.GIT_COMMIT}
                            
                            Ver detalles: ${env.BUILD_URL}
                        """,
                        to: "${env.CHANGE_AUTHOR_EMAIL ?: 'admin@ejemplo.com'}"
                    )
                } catch (Exception e) {
                    echo "‚ö†Ô∏è  No se pudo enviar notificaci√≥n: ${e.getMessage()}"
                }
            }
        }
        
        failure {
            echo '‚ùå Pipeline fall√≥!'
            
            // Opcional: Notificaciones de error
            script {
                try {
                    emailext (
                        subject: "‚ùå Build Fall√≥ - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                            El build fall√≥. Por favor revisa los logs.
                            
                            Proyecto: ${env.JOB_NAME}
                            Build: #${env.BUILD_NUMBER}
                            
                            Ver logs: ${env.BUILD_URL}console
                        """,
                        to: "${env.CHANGE_AUTHOR_EMAIL ?: 'admin@ejemplo.com'}"
                    )
                } catch (Exception e) {
                    echo "‚ö†Ô∏è  No se pudo enviar notificaci√≥n de error: ${e.getMessage()}"
                }
            }
        }
        
        unstable {
            echo '‚ö†Ô∏è  Build completado con advertencias'
        }
    }
}