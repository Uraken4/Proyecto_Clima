pipeline {
    agent any
    
    environment {
        NODE_VERSION = '18.20.1'
        PATH = "/tmp/node-v18.20.1-linux-x64/bin:${env.PATH}"
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Usando c√≥digo fuente del workspace..."
                sh '''
                    echo "üìã Informaci√≥n del Build:"
                    echo "Build: ${BUILD_NUMBER}"
                    echo "Workspace: $(pwd)"
                    echo "Usuario: $(whoami)"
                    echo "Fecha: $(date)"
                    echo "üìÇ Contenido del workspace:"
                    ls -la
                '''
            }
        }
        
        stage('Check System Dependencies') {
            steps {
                echo "üîç Verificando herramientas del sistema..."
                sh '''
                    echo "üìä Informaci√≥n del sistema:"
                    echo "Sistema: $(uname -a)"
                    echo "Usuario: $(whoami)"
                    echo "Directorio: $(pwd)"
                    echo "Distribuci√≥n: $(cat /etc/os-release | head -2 2>/dev/null || echo 'No disponible')"
                    
                    # Verificar herramientas esenciales (ya disponibles en la mayor√≠a de sistemas)
                    echo "üîç Verificando herramientas b√°sicas:"
                    which curl && echo "‚úÖ curl disponible" || echo "‚ùå curl no disponible"
                    which wget && echo "‚úÖ wget disponible" || echo "‚ùå wget no disponible"
                    which tar && echo "‚úÖ tar disponible" || echo "‚ùå tar no disponible"
                    which gzip && echo "‚úÖ gzip disponible" || echo "‚ùå gzip no disponible"
                    
                    # Verificar si tenemos al menos una herramienta de descarga
                    if ! command -v curl >/dev/null 2>&1 && ! command -v wget >/dev/null 2>&1; then
                        echo "‚ùå ERROR: No hay curl ni wget disponible"
                        echo "üí° Soluci√≥n: Instalar curl o wget en el sistema Jenkins"
                        exit 1
                    fi
                    
                    echo "‚úÖ Herramientas b√°sicas verificadas"
                '''
            }
        }
        
        stage('Install Node.js') {
            steps {
                echo "üì• Instalando Node.js..."
                sh '''
                    # Verificar si Node.js ya est√° disponible
                    if command -v node >/dev/null 2>&1; then
                        echo "‚úÖ Node.js ya disponible: $(node --version)"
                    else
                        echo "üì• Node.js no encontrado, instalando en /tmp..."
                        
                        # Crear directorio temporal
                        mkdir -p /tmp/node-install
                        cd /tmp/node-install
                        
                        # Detectar arquitectura
                        ARCH=$(uname -m)
                        case $ARCH in
                            x86_64)
                                NODE_ARCH="x64"
                                ;;
                            aarch64)
                                NODE_ARCH="arm64"
                                ;;
                            *)
                                echo "‚ùå Arquitectura no soportada: $ARCH"
                                exit 1
                                ;;
                        esac
                        
                        echo "üèóÔ∏è Arquitectura: $ARCH -> Node.js $NODE_ARCH"
                        
                        # Usar tar.gz para m√°xima compatibilidad
                        NODE_FILE="node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.gz"
                        NODE_URL="https://nodejs.org/dist/v${NODE_VERSION}/${NODE_FILE}"
                        
                        echo "üì• Descargando desde: $NODE_URL"
                        
                        # Intentar descargar con curl o wget
                        if command -v curl >/dev/null 2>&1; then
                            curl -fsSL "$NODE_URL" -o "$NODE_FILE"
                        elif command -v wget >/dev/null 2>&1; then
                            wget -q "$NODE_URL" -O "$NODE_FILE"
                        else
                            echo "‚ùå No hay curl ni wget disponible"
                            exit 1
                        fi
                        
                        # Verificar descarga
                        if [ ! -f "$NODE_FILE" ]; then
                            echo "‚ùå Error al descargar Node.js"
                            exit 1
                        fi
                        
                        echo "üì¶ Extrayendo Node.js..."
                        tar -xzf "$NODE_FILE"
                        
                        # Verificar extracci√≥n
                        NODE_DIR="node-v${NODE_VERSION}-linux-${NODE_ARCH}"
                        if [ ! -d "$NODE_DIR" ]; then
                            echo "‚ùå Error al extraer Node.js"
                            exit 1
                        fi
                        
                        # Mover a ubicaci√≥n est√°ndar temporal
                        mv "$NODE_DIR" "/tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}"
                        
                        echo "‚úÖ Node.js instalado en /tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}"
                    fi
                    
                    # Verificar instalaci√≥n
                    export PATH="/tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}/bin:$PATH"
                    echo "üîç Verificando instalaci√≥n:"
                    node --version
                    npm --version
                '''
            }
        }
        
        stage('Project Structure') {
            steps {
                echo "üìÇ Analizando estructura del proyecto..."
                sh '''
                    # Asegurar que Node.js est√© en el PATH
                    export PATH="/tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}/bin:$PATH"
                    
                    echo "üîç Verificando estructura del proyecto:"
                    
                    if [ -d "test_app" ]; then
                        echo "‚úÖ Directorio test_app encontrado"
                        cd test_app
                        
                        echo "üìÇ Contenido de test_app:"
                        ls -la
                        
                        # Verificar archivos principales
                        echo "üìä Archivos del proyecto:"
                        [ -f "package.json" ] && echo "  ‚úÖ package.json" || echo "  ‚ùå package.json"
                        [ -f "index.js" ] && echo "  ‚úÖ index.js" || echo "  ‚ùå index.js"
                        [ -f "index.test.js" ] && echo "  ‚úÖ index.test.js" || echo "  ‚ùå index.test.js"
                        [ -f "pubspec.yaml" ] && echo "  ‚úÖ pubspec.yaml (Flutter)" || echo "  ‚ö†Ô∏è pubspec.yaml no encontrado"
                        [ -d "lib" ] && echo "  ‚úÖ lib/ (Flutter)" || echo "  ‚ö†Ô∏è lib/ no encontrado"
                        
                        # Mostrar package.json si existe
                        if [ -f "package.json" ]; then
                            echo "üìÑ Contenido de package.json:"
                            cat package.json
                            
                            # Validar JSON b√°sico
                            echo "üîç Validando package.json..."
                            if node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"; then
                                echo "  ‚úÖ package.json es v√°lido"
                            else
                                echo "  ‚ùå package.json tiene errores"
                                exit 1
                            fi
                        fi
                        
                    else
                        echo "‚ùå Directorio test_app no encontrado"
                        echo "üìÇ Contenido actual:"
                        ls -la
                        exit 1
                    fi
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo "üì¶ Instalando dependencias del proyecto..."
                dir('test_app') {
                    sh '''
                        # Asegurar que Node.js est√© en el PATH
                        export PATH="/tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}/bin:$PATH"
                        
                        if [ -f "package.json" ]; then
                            echo "üì• Instalando dependencias de Node.js..."
                            
                            # Mostrar informaci√≥n previa
                            echo "üìä Informaci√≥n previa:"
                            echo "Node.js: $(node --version)"
                            echo "npm: $(npm --version)"
                            echo "Directorio: $(pwd)"
                            
                            # Instalar dependencias
                            npm install
                            
                            # Verificar instalaci√≥n
                            echo "üì¶ Verificando instalaci√≥n:"
                            [ -d "node_modules" ] && echo "‚úÖ node_modules creado" || echo "‚ùå node_modules no creado"
                            
                            # Listar dependencias instaladas
                            echo "üìä Dependencias instaladas:"
                            npm list --depth=0 || echo "‚ö†Ô∏è Algunas dependencias pueden tener problemas menores"
                            
                        else
                            echo "‚ö†Ô∏è No hay package.json, saltando instalaci√≥n de dependencias"
                        fi
                    '''
                }
            }
        }
        
        stage('Verify Installation') {
            steps {
                echo "üîç Verificando instalaci√≥n completa..."
                dir('test_app') {
                    sh '''
                        # Asegurar que Node.js est√© en el PATH
                        export PATH="/tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}/bin:$PATH"
                        
                        echo "üìä Estado del entorno:"
                        echo "Node.js: $(node --version)"
                        echo "npm: $(npm --version)"
                        echo "Directorio: $(pwd)"
                        
                        echo "üìÇ Archivos del proyecto:"
                        ls -la
                        
                        echo "üì¶ Estado de node_modules:"
                        if [ -d "node_modules" ]; then
                            echo "‚úÖ node_modules existe"
                            echo "üìä Tama√±o: $(du -sh node_modules)"
                            echo "üìà Cantidad de m√≥dulos: $(ls node_modules | wc -l)"
                        else
                            echo "‚ùå node_modules no existe"
                        fi
                        
                        # Verificar archivos principales
                        echo "üîç Verificando archivos principales:"
                        for file in index.js index.test.js; do
                            if [ -f "$file" ]; then
                                echo "üìÑ $file:"
                                echo "  ‚úÖ Existe"
                                echo "  üìä Tama√±o: $(wc -l < "$file") l√≠neas"
                                
                                # Verificar sintaxis b√°sica
                                if node -c "$file" 2>/dev/null; then
                                    echo "  ‚úÖ Sintaxis v√°lida"
                                else
                                    echo "  ‚ùå Error de sintaxis"
                                fi
                            else
                                echo "üìÑ $file: ‚ùå No encontrado"
                            fi
                        done
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                echo "üß™ Ejecutando tests..."
                dir('test_app') {
                    sh '''
                        # Asegurar que Node.js est√© en el PATH
                        export PATH="/tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}/bin:$PATH"
                        
                        if [ -f "index.test.js" ]; then
                            echo "‚úÖ Archivo de tests encontrado"
                            
                            # Verificar si hay script de test en package.json
                            if [ -f "package.json" ] && grep -q '"test"' package.json; then
                                echo "üöÄ Ejecutando tests con npm test..."
                                npm test
                            else
                                echo "üöÄ Ejecutando tests directamente..."
                                node index.test.js
                            fi
                        else
                            echo "‚ö†Ô∏è No se encontr√≥ archivo de tests"
                            echo "üìÇ Archivos disponibles:"
                            ls -la *.js 2>/dev/null || echo "No hay archivos .js"
                        fi
                    '''
                }
            }
        }
        
        stage('Code Analysis') {
            steps {
                echo "üîç An√°lisis b√°sico del c√≥digo..."
                dir('test_app') {
                    sh '''
                        # Asegurar que Node.js est√© en el PATH
                        export PATH="/tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}/bin:$PATH"
                        
                        echo "üìä An√°lisis de archivos JavaScript:"
                        for file in *.js; do
                            if [ -f "$file" ]; then
                                echo "üîç Analizando $file:"
                                echo "  üìä L√≠neas: $(wc -l < "$file")"
                                echo "  üìä Caracteres: $(wc -c < "$file")"
                                
                                # Verificar sintaxis
                                if node -c "$file"; then
                                    echo "  ‚úÖ Sintaxis correcta"
                                else
                                    echo "  ‚ùå Error de sintaxis"
                                fi
                            fi
                        done
                        
                        # Informaci√≥n del proyecto
                        if [ -f "package.json" ]; then
                            echo "üì¶ Informaci√≥n del proyecto:"
                            node -e "
                                const pkg = require('./package.json');
                                console.log('  Nombre:', pkg.name || 'No especificado');
                                console.log('  Versi√≥n:', pkg.version || 'No especificado');
                                console.log('  Descripci√≥n:', pkg.description || 'No especificado');
                                console.log('  Dependencias:', Object.keys(pkg.dependencies || {}).length);
                                console.log('  DevDependencies:', Object.keys(pkg.devDependencies || {}).length);
                            "
                        fi
                    '''
                }
            }
        }
        
        stage('Build Summary') {
            steps {
                echo "üìã Resumen del build..."
                sh '''
                    # Asegurar que Node.js est√© en el PATH
                    export PATH="/tmp/node-v${NODE_VERSION}-linux-${NODE_ARCH}/bin:$PATH"
                    
                    echo "‚úÖ Build completado exitosamente"
                    echo ""
                    echo "üìä Resumen:"
                    echo "  üîß Node.js: $(node --version)"
                    echo "  üì¶ npm: $(npm --version)"
                    echo "  üìÇ Directorio: $(pwd)"
                    echo "  üïê Fecha: $(date)"
                    echo ""
                    echo "üìà Estad√≠sticas del proyecto:"
                    if [ -d "test_app" ]; then
                        cd test_app
                        echo "  üìÑ Archivos JS: $(find . -name "*.js" -type f | wc -l)"
                        echo "  üì¶ node_modules: $([ -d "node_modules" ] && echo "‚úÖ Instalado" || echo "‚ùå No instalado")"
                        echo "  üß™ Tests: $([ -f "index.test.js" ] && echo "‚úÖ Disponibles" || echo "‚ùå No encontrados")"
                    fi
                '''
            }
        }
    }
    
    post {
        always {
            echo "üßπ Limpiando recursos temporales..."
            sh '''
                echo "üóëÔ∏è Limpiando instalaci√≥n temporal de Node.js..."
                rm -rf /tmp/node-install
                rm -rf /tmp/node-v${NODE_VERSION}-linux-*
                echo "‚úÖ Limpieza completada"
            '''
        }
        
        success {
            echo """
                ‚úÖ Pipeline completado exitosamente!
                
                üéâ Resumen del √©xito:
                - Proyecto: proyecto_clima_Pipeline
                - Build: #${BUILD_NUMBER}
                - Estado: SUCCESS ‚úÖ
                
                ‚úÖ Etapas completadas:
                1. ‚úÖ Checkout del c√≥digo
                2. ‚úÖ Instalaci√≥n de herramientas del sistema
                3. ‚úÖ Instalaci√≥n de Node.js
                4. ‚úÖ An√°lisis de estructura del proyecto
                5. ‚úÖ Instalaci√≥n de dependencias
                6. ‚úÖ Verificaci√≥n de instalaci√≥n
                7. ‚úÖ Ejecuci√≥n de tests
                8. ‚úÖ An√°lisis de c√≥digo
                9. ‚úÖ Resumen del build
            """
        }
        
        failure {
            echo """
                ‚ùå Pipeline fall√≥!
                
                üí• Informaci√≥n del error:
                - Proyecto: proyecto_clima_Pipeline
                - Build: #${BUILD_NUMBER}
                - Estado: FAILURE ‚ùå
                
                üîß Pasos para diagn√≥stico:
                1. Revisar los logs de la etapa que fall√≥
                2. Verificar que Jenkins tenga permisos de administrador
                3. Comprobar conectividad a internet
                4. Verificar estructura del proyecto
                
                üí° Verificaciones comunes:
                - ¬øJenkins puede ejecutar como root?
                - ¬øHay acceso a internet para descargar Node.js?
                - ¬øEl directorio test_app existe en el repositorio?
                - ¬øEl archivo package.json es v√°lido?
            """
        }
    }
}